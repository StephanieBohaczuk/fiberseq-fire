import pandas as pd
import sys
import os

ref = config["ref"]
ref_name = config["ref_name"]
n_chunks = config["n_chunks"]
chunks = [f"{i+1}-of-{n_chunks}" for i in range(n_chunks)]
excludes = config["excludes"]
dhs = config["dhs"]
max_t = config.get("max_t", 4)

fai = pd.read_csv(f"{ref}.fai", sep="\t", names=["chr", "length", "x", "y", "z"])
chroms = [chrom for chrom in fai["chr"] if "_" not in chrom]
genome_len = fai["length"].sum()
window_size = int(genome_len / n_chunks) + 1


data = pd.read_csv(config["manifest"], sep="\t", comment="#").set_index("sample")

print(data.index)


wildcard_constraints:
    chrom="|".join(chroms),
    call="|".join(["msp", "m6a"]),
    chunk="|".join(chunks),
    sm="|".join(data.index),


rule all:
    input:
        expand("results/{sm}/acc.model.results.bed.gz", sm=data.index),
        expand("results/{sm}/trackHub/hub.txt", sm=data.index),
        expand("results/{sm}/fdr.peaks.d4", sm=data.index),
        expand("results/{sm}/fdr.peaks.and.coverages.bed.gz", sm=data.index),


rule bed_chunks:
    input:
        ref=ref,
        fai=f"{ref}.fai",
    output:
        beds=temp(
            expand(
                "temp/{sm}/chunks/{chunk}.chunk.bed",
                chunk=chunks,
                allow_missing=True,
            )
        ),
    threads: 1
    params:
        window_size=window_size,
    shell:
        """
        fibertools split \
          -g {input.fai} \
          -o {output.beds}
        """


rule extract_and_split:
    input:
        bam=lambda wc: data.loc[wc.sm, "bam"],
        bed="temp/{sm}/chunks/{chunk}.chunk.bed",
    output:
        bed=temp("temp/{sm}/{chunk}.extract.all.bed.gz"),
    threads: 4
    shell:
        """
        samtools view \
          -b -M -L {input.bed} -@ {threads} {input.bam} \
          | ft -t {threads} extract --all - \
          | bgzip -@ {threads} \
          > {output.bed}
        """


rule dhs_null:
    input:
        fai=ancient(f"{ref}.fai"),
        dhs=dhs,
        exclude=excludes,
    output:
        bed=protected("results/{sm}/dhs_with_null.bed.gz"),
        exclude=temp("temp/{sm}/exclues.bed"),
    threads: 2
    shell:
        """
        less {input.exclude} | cut -f 1-3 | bedtools sort -i - | bedtools merge -i - > {output.exclude
        (
            less {input.dhs} | cut -f 1-3 | sed 's/$/\tDHS/g' ; 
            bedtools shuffle -noOverlapping \
                -excl <( less {input.dhs} {output.exclude} | cut -f 1-3 | bedtools sort -i - | bedtools merge -i -) \
                -i <(bedtools intersect -v -u -a {input.dhs} -b {output.exclude}) \
                -g {input.fai} |
                cut -f 1-3 | sed 's/$/\tNULL/g' 
        ) |
            sort -k 1,1 -k2,2n --parallel={threads} -S 5G |
            bgzip -@ {threads} > {output.bed}
        """


rule model_input:
    input:
        bam=lambda wc: data.loc[wc.sm, "bam"],
        dhs=rules.dhs_null.output,
    output:
        bed=temp("temp/{sm}/small.extract.all.bed.gz"),
    threads: 8
    params:
        n=2_000_000,
    shell:
        """ 
        (samtools view \
          -h -M -L {input.dhs} -@ {threads} {input.bam} \
          | head -n {params.n} \
          | samtools view -u \
          | ft -t {threads} extract --all - \
          | bgzip -@ {threads} \
          > {output.bed} ) || echo "random head error"
        """


rule make_model:
    input:
        bed=rules.model_input.output.bed,
        dhs=rules.dhs_null.output,
    output:
        model=protected("results/{sm}/model.dat"),
    benchmark:
        "benchmarks/{sm}/make_model.tsv"
    threads: 60
    shell:
        """
        fibertools -t {threads} -v model --dhs {input.dhs} -o {output.model} {input.bed}
        """


def get_model(wc):
    if "model" in config:
        return ancient(config["model"])
    return ancient(rules.make_model.output.model)


rule apply_model:
    input:
        bed=rules.extract_and_split.output.bed,
        dhs=rules.dhs_null.output,
        model=get_model,
    output:
        bed=temp("temp/{sm}/chunks/{chunk}.bed"),
    benchmark:
        "benchmarks/{sm}/chunks/apply_model_{chunk}.tsv"
    threads: 1
    shell:
        """
        fibertools -v model -m {input.model} -o {output.bed} {input.bed}
        """


rule sort_model:
    input:
        bed=rules.apply_model.output.bed,
    output:
        bed=temp("temp/{sm}/chunks/{chunk}.sorted.bed"),
    threads: 1
    shell:
        """
        sort -S 5G -k1,1 -k2,2n -k3,3n -k4,4 {input.bed} > {output.bed}
        """


rule merge_model_results:
    input:
        beds=expand(rules.sort_model.output.bed, chunk=chunks, allow_missing=True),
    output:
        bed="results/{sm}/acc.model.results.bed.gz",
    benchmark:
        "benchmarks/{sm}/merge_model_results.tsv"
    threads: 8
    params:
        n_chunks=n_chunks + 1,
    shell:
        """
        sort --batch-size={params.n_chunks} -k1,1 -k2,2n -k3,3n -k4,4 -S 5G -m {input.beds} | uniq | bgzip -@ {threads} > {output.bed}
        """


rule make_fdr_d4:
    input:
        fai=ancient(f"{ref}.fai"),
        bed=rules.merge_model_results.output.bed,
    output:
        d4="results/{sm}/fdr.coverages.d4",
    benchmark:
        "benchmarks/{sm}/fdr.d4.tsv"
    threads: 8
    shell:
        """
        fibertools -v bed2d4 \
          -g {input.fai} \
          -c score \
          {input.bed} {output.d4}
        """


rule make_fdr_peaks:
    input:
        fai=ancient(f"{ref}.fai"),
        d4=rules.make_fdr_d4.output.d4,
    output:
        d4="results/{sm}/fdr.peaks.d4",
    benchmark:
        "benchmarks/{sm}/fdr.peaks.tsv"
    threads: 8
    shell:
        """
        fibertools -v bed2d4 \
          -g {input.fai} \
          -c score \
          -q {input.d4} {output.d4}
        """


rule fdr_bed:
    input:
        peaks=rules.make_fdr_peaks.output.d4,
    output:
        bed="results/{sm}/fdr.peaks.and.coverages.bed.gz",
    threads: 8
    shell:
        """
        d4tools view {input.peaks} \
          | bedtools sort \
          | bgzip -@ {threads} \
        > {output.bed}
        """


rule coverage_tracks:
    input:
        bed=rules.fdr_bed.output.bed,
        fai=ancient(f"{ref}.fai"),
    output:
        bed=temp("temp/{sm}/trackHub/bw/cov.bed"),
        fdr="results/{sm}/trackHub/bw/fdr.bw",
        acc="results/{sm}/trackHub/bw/acc.bw",
        link="results/{sm}/trackHub/bw/link.bw",
        nuc="results/{sm}/trackHub/bw/nuc.bw",
    threads: 1
    shell:
        """
        zcat {input.bed} | cut -f 1-4 > {output.bed}
        bedGraphToBigWig {output.bed} {input.fai} {output.fdr}

        zcat {input.bed} | cut -f 1-3,5 > {output.bed}
        bedGraphToBigWig {output.bed} {input.fai} {output.acc}

        zcat {input.bed} | cut -f 1-3,6 > {output.bed}
        bedGraphToBigWig {output.bed} {input.fai} {output.link}

        zcat {input.bed} | cut -f 1-3,7 > {output.bed}
        bedGraphToBigWig {output.bed} {input.fai} {output.nuc}
        """


rule fdr_tracks:
    input:
        bed=rules.fdr_bed.output.bed,
        fai=ancient(f"{ref}.fai"),
    output:
        bw="results/{sm}/trackHub/bw/fdr.{fdr}.bw",
        bed=temp("temp/{sm}/trackHub/bw/fdr.{fdr}.bed"),
    threads: 1
    shell:
        """
        printf 'chr1\t0\t1\t0\n' > {output.bed}
        zcat {input.bed} | cut -f 1-4 | awk '$4 > {wildcards.fdr}' >> {output.bed}
        bedGraphToBigWig {output.bed} {input.fai} {output.bw}
        """


rule trackhub:
    input:
        bed=rules.merge_model_results.output.bed,
        fai=ancient(f"{ref}.fai"),
        bw=expand(
            rules.fdr_tracks.output.bw, fdr=[70, 80, 90, 100, 110], allow_missing=True
        ),
        fdr=rules.coverage_tracks.output.fdr,
        acc=rules.coverage_tracks.output.acc,
        link=rules.coverage_tracks.output.link,
        nuc=rules.coverage_tracks.output.nuc,
    output:
        hub="results/{sm}/trackHub/hub.txt",
    benchmark:
        "benchmarks/{sm}/trackhub.tsv"
    threads: 1
    params:
        ref=ref_name,
    shell:
        """
        fibertools -v trackhub \
          -r {params.ref} \
          -t results/{wildcards.sm}/trackHub \
          {input.bed} {input.fai} \
          --bw {input.acc} {input.link} {input.nuc} {input.bw} {input.fdr}
        """
